.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "NACK\-PROTOCOL" "7" "November 2010" "" ""
.
.SH "NAME"
\fBnack\-protocol\fR \- node ruby IPC protocol
.
.SH "DESCRIPTION"
Node communicates with its Ruby worker process over a TCP or UNIX socket\. The Node half is the client of the connection while the Ruby worker is the server\.
.
.SS "REQUEST"
First, the client MUST send the \fBenv\fR hash which MUST be serialized as a single JSON netstring\. The \fBenv\fR has MUST include the CGI environment variables specificied by the Rack SPEC\. This excludes any Rack specific variables that start with "rack\."\.
.
.P
Next, the client MAY send the request body following the \fBenv\fR\. The body SHOULD NOT be encoded as JSON\. Depending on the size, the body MAY be sent as a single netstring or chunked into multiple smaller parts\. These chunks MUST NOT be empty strings\.
.
.P
Once the body parts have been sent, the client MUST send an empty netstring to indicate the request is finished\. Then the client MAY close its write socket\.
.
.P
Sample:
.
.P
16:{"METHOD":"GET"},4:foo=,3:bar,0:,
.
.SS "RESPONSE"
To start the response, the server MUST first send a netstring with the integer status code of the response\. Following this MUST be a JSON serialized netstring of the response headers hash\.
.
.P
Similar to the request body, the response body MAY be sent as a single netstring or chunked into multiple parts\. The body parts SHOULD NOT be JSON encoded or empty strings\.
.
.P
When the response is finished, the server MUST send an empty netstring to indicate the response is finished\. After this finish string is sent, the server MAY close the connection\.
.
.P
Sample:
.
.P
3:200,28:{"Content\-Type":"text/html"},10:<!DOCTYPE ,5:html>,0:,
.
.SH "SEE ALSO"
nack\-client(3), json(7), netstrings(7)
